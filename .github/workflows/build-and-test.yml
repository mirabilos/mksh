{
  "jobs": {
    "bt-asan": {
      "runs-on": "ubuntu-22.04",
      "steps": [
        {
          "name": "Cancel previous runs",
          "uses": "styfle/cancel-workflow-action@0.11.0",
          "with": {
            "access_token": "${{ github.token }}",
            "all_but_latest": true
          }
        },
        {
          "uses": "actions/checkout@v3"
        },
        {
          "run": "(git gc || :)"
        },
        {
          "run": "ASAN_OPTIONS=check_initialization_order=true:detect_stack_use_after_return=true:detect_invalid_pointer_pairs=2:dump_instruction_bytes=true:color=never:strict_string_checks=true:exitcode=251 && export ASAN_OPTIONS && env HAVE_CAN_FWRAPV=0 CFLAGS='-Og -fstack-protector-strong -Wformat -Werror=format-security -Wall -Wextra -fsanitize=address -fno-omit-frame-pointer -fno-common -fsanitize=pointer-compare -fsanitize=pointer-subtract -fsanitize=undefined -fsanitize=shift -fsanitize=shift-exponent -fsanitize=shift-base -fsanitize=integer-divide-by-zero -fsanitize=unreachable -fsanitize=vla-bound -fsanitize=null -fsanitize=signed-integer-overflow -fsanitize=bounds -fsanitize=bounds-strict -fsanitize=alignment -fsanitize=object-size -fsanitize=nonnull-attribute -fsanitize=returns-nonnull-attribute -fsanitize=bool -fsanitize=enum -fsanitize=vptr -fsanitize=pointer-overflow -fsanitize=builtin -fsanitize-address-use-after-scope -fstack-clash-protection' CPPFLAGS='-Wdate-time -D_FORTIFY_SOURCE=2' LDFLAGS='-Wl,-z,relro -Wl,-z,now -Wl,--as-needed' dash Build.sh ${{ matrix.testlksh }} -r -g && script -qef -c './test.sh -e ASAN_OPTIONS=\"$ASAN_OPTIONS\" -f' && ./?ksh FAQ2HTML.sh && echo Alles gut."
        }
      ],
      "strategy": {
        "fail-fast": true,
        "matrix": {
          "testlksh": [
            "",
            "-L"
          ]
        }
      }
    },
    "bt-normal": {
      "runs-on": "${{ matrix.os }}",
      "steps": [
        {
          "uses": "actions/checkout@v3"
        },
        {
          "run": "(git gc || :)"
        },
        {
          "run": "env CFLAGS='-O2 -Wformat-security -Wformat -Wall -Wextra' sh Build.sh ${{ matrix.testlksh }} -r && if script -qc true >/dev/null 2>&1; then script -qef -c './test.sh -f'; else script -q typescript ./test.sh -f; fi && ./?ksh FAQ2HTML.sh && echo Alles gut."
        }
      ],
      "strategy": {
        "fail-fast": true,
        "matrix": {
          "os": [
            "ubuntu-22.04",
            "macos-11",
            "macos-12"
          ],
          "testlksh": [
            "",
            "-L"
          ]
        }
      }
    },
    "chroot-alpine": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "uses": "actions/checkout@v3"
        },
        {
          "run": "(git gc || :)"
        },
        {
          "uses": "jirutka/setup-alpine@v1",
          "with": {
            "branch": "edge",
            "packages": "build-base ed perl util-linux yash"
          }
        },
        {
          "run": "tryshell=yash; nextshell=sh; set -ex; rm -rf build; mkdir build; flag=; for dir in mksh lksh; do mkdir build/$dir; cd build/$dir; $tryshell ../../Build.sh $flag -r; if script -qc true >/dev/null 2>&1; then script -qef -c './test.sh -f'; else script -q typescript ./test.sh -f; fi; ./?ksh ../../FAQ2HTML.sh; cd ../..; tryshell=$nextshell; flag=-L; done; echo Alles gut.",
          "shell": "alpine.sh {0}"
        }
      ]
    },
    "vm-dflybsd": {
      "runs-on": "macos-12",
      "steps": [
        {
          "uses": "actions/checkout@v3"
        },
        {
          "run": "(git gc || :)"
        },
        {
          "uses": "vmactions/dragonflybsd-vm@v0",
          "with": {
            "prepare": "pkg install -y perl5",
            "run": "tryshell=sh; nextshell=sh; set -ex; rm -rf build; mkdir build; flag=; for dir in mksh lksh; do mkdir build/$dir; cd build/$dir; $tryshell ../../Build.sh $flag -r; if script -qc true >/dev/null 2>&1; then script -qef -c './test.sh -f'; else script -q typescript ./test.sh -f; fi; ./?ksh ../../FAQ2HTML.sh; cd ../..; tryshell=$nextshell; flag=-L; done; echo Alles gut.",
            "usesh": true
          }
        }
      ]
    },
    "vm-nbsd": {
      "if": "${{ false }}",
      "runs-on": "macos-12",
      "steps": [
        {
          "uses": "actions/checkout@v3"
        },
        {
          "run": "(git gc || :)"
        },
        {
          "uses": "vmactions/netbsd-vm@v0",
          "with": {
            "prepare": "pkg_add perl",
            "run": "tryshell=ksh; nextshell=sh; set -ex; rm -rf build; mkdir build; flag=; for dir in mksh lksh; do mkdir build/$dir; cd build/$dir; $tryshell ../../Build.sh $flag -r; echo 255 >test.res; echo >test.wait; (script -qf -c './test.sh -f; echo $? >test.res; sleep 1; rm -f test.wait'; maxwait=0; while test -e test.wait; do sleep 1; maxwait=$(expr $maxwait + 1); test $maxwait -lt 900 || break; done; exit \"$(cat test.res)\"); ./?ksh ../../FAQ2HTML.sh; cd ../..; tryshell=$nextshell; flag=-L; done; echo Alles gut.",
            "usesh": true
          }
        }
      ]
    },
    "vm-obsd": {
      "if": "${{ false }}",
      "runs-on": "macos-12",
      "steps": [
        {
          "uses": "actions/checkout@v3"
        },
        {
          "run": "(git gc || :)"
        },
        {
          "uses": "vmactions/openbsd-vm@v0",
          "with": {
            "run": "tryshell=ksh; nextshell=sh; set -ex; rm -rf build; mkdir build; flag=; for dir in mksh lksh; do mkdir build/$dir; cd build/$dir; $tryshell ../../Build.sh $flag -r; echo 255 >test.res; echo >test.wait; (script -c './test.sh -f; echo $? >test.res; sleep 1; rm -f test.wait'; maxwait=0; while test -e test.wait; do sleep 1; maxwait=$(expr $maxwait + 1); test $maxwait -lt 900 || break; done; exit \"$(cat test.res)\"); ./?ksh ../../FAQ2HTML.sh; cd ../..; tryshell=$nextshell; flag=-L; done; echo Alles gut.",
            "usesh": true
          }
        }
      ]
    },
    "vm-slowlartus": {
      "runs-on": "macos-12",
      "steps": [
        {
          "uses": "actions/checkout@v3"
        },
        {
          "run": "(git gc || :)"
        },
        {
          "uses": "vmactions/solaris-vm@v0",
          "with": {
            "prepare": "pkgutil -y -i gcc5core",
            "run": "CC=gcc; export CC; tryshell=/bin/sh; nextshell=bash; set -ex; rm -rf build; mkdir build; flag=; for dir in mksh lksh; do mkdir build/$dir; cd build/$dir; $tryshell ../../Build.sh $flag -r; echo 255 >test.res; echo >test.wait; :>screenlog.0; tail -f screenlog.0 & bpid=$!; screen -d -m -L sh -c './test.sh -f; echo $? >test.res; sleep 1; rm -f test.wait'; maxwait=0; while test -e test.wait; do sleep 1; maxwait=$(expr $maxwait + 1); test $maxwait -lt 900 || break; done; theres=$(cat test.res); echo === \"$theres\"; kill $bpid || :; test x\"$theres\" = x\"0\"; ./?ksh ../../FAQ2HTML.sh; cd ../..; tryshell=$nextshell; flag=-L; done; echo Alles gut.",
            "usesh": true
          }
        }
      ]
    }
  },
  "name": "build-and-test",
  "on": {
    "push": {
      "branches": [
        "travis-ci"
      ]
    },
    "workflow_dispatch": null
  }
}
